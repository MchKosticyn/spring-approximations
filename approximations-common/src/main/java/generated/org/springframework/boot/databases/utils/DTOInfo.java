package generated.org.springframework.boot.databases.utils;

import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

// All info about DTO for table's initialize
public class DTOInfo<T, V> {

    // Common info
    private final Class<V> idType;
    private final Class<T> entityType;

    private final String tableName;
    private final String[] fieldsToValidateNames; // only fields that should be validated by validators

    private final boolean isAutoGeneratedId; // GeneratedValue annotation set in data-class
    private final boolean needTrack; // true if SpringBootTests option set in WebBench

    // DTO functions
    private final Supplier<T> blankInit;
    private final Consumer<T> relationsInit;
    private final Function<T, Object[]> buildIdFunction;
    private final Function<T, Object> getIdFunction;
    private final BiConsumer<T, Object> setIdFunction;
    private final Function<T, T> copyFunction;

    // Setters and getters
    private final String[] fieldsNames; // list of field's names
    private final Function<T, Object>[] getters;
    private final BiConsumer<T, Object>[] setters;

    private final String[] fieldsToSoftNames; // names of fields for assumeSoft
    private final Class<?>[] fieldsToSoftTypes; // type of fields for assumeSoft

    public DTOInfo(
            Class<V> idType,
            Class<T> entityType,
            String tableName,
            String[] fieldsToValidateNames,
            boolean isAutoGenerateId,
            boolean needTrack,

            // DTO functions
            Supplier<T> blankInit,
            Consumer<T> relationsInit,
            Function<T, Object[]> buildIdFunction,
            Function<T, Object> getIdFunction,
            BiConsumer<T, Object> setIdFunction,
            Function<T, T> copyFunction,

            // Setters and getters
            String[] fieldsNames,
            Function<T, Object>[] getters,
            BiConsumer<T, Object>[] setters,

            String[] fieldsToSoftNames,
            Class<?>[] fieldsToSoftTypes
    ) {
        this.idType = idType;
        this.entityType = entityType;
        this.tableName = tableName;
        this.fieldsToValidateNames = fieldsToValidateNames;
        this.isAutoGeneratedId = isAutoGenerateId;
        this.needTrack = needTrack;
        this.blankInit = blankInit;
        this.relationsInit = relationsInit;
        this.buildIdFunction = buildIdFunction;
        this.getIdFunction = getIdFunction;
        this.setIdFunction = setIdFunction;
        this.copyFunction = copyFunction;
        this.fieldsNames = fieldsNames;
        this.getters = getters;
        this.setters = setters;
        this.fieldsToSoftNames = fieldsToSoftNames;
        this.fieldsToSoftTypes = fieldsToSoftTypes;
    }

    public Class<V> getIdType() {
        return idType;
    }

    public Class<T> getEntityType() {
        return entityType;
    }

    public String getTableName() {
        return tableName;
    }

    public String[] getFieldsToValidateNames() {
        return fieldsToValidateNames;
    }

    public boolean isAutoGeneratedId() {
        return isAutoGeneratedId;
    }

    public boolean isNeedTrack() {
        return needTrack;
    }

    public Supplier<T> getBlankInit() {
        return blankInit;
    }

    public Consumer<T> getRelationsInit() {
        return relationsInit;
    }

    public Function<T, Object[]> getBuildIdFunction() {
        return buildIdFunction;
    }

    public Function<T, Object> getGetIdFunction() {
        return getIdFunction;
    }

    public BiConsumer<T, Object> getSetIdFunction() {
        return setIdFunction;
    }

    public Function<T, T> getCopyFunction() {
        return copyFunction;
    }

    public String[] getFieldsNames() {
        return fieldsNames;
    }

    public Function<T, Object>[] getGetters() {
        return getters;
    }

    public BiConsumer<T, Object>[] getSetters() {
        return setters;
    }

    public String[] getFieldsToSoftNames() {
        return fieldsToSoftNames;
    }

    public Class<?>[] getFieldsToSoftTypes() {
        return fieldsToSoftTypes;
    }
}
